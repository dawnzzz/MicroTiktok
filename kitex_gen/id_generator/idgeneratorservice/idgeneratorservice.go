// Code generated by Kitex v0.5.2. DO NOT EDIT.

package idgeneratorservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	id_generator "github.com/dawnzzz/MicroTiktok/kitex_gen/id_generator"
)

func serviceInfo() *kitex.ServiceInfo {
	return idGeneratorServiceServiceInfo
}

var idGeneratorServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "IdGeneratorService"
	handlerType := (*id_generator.IdGeneratorService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetUserID":    kitex.NewMethodInfo(getUserIDHandler, newIdGeneratorServiceGetUserIDArgs, newIdGeneratorServiceGetUserIDResult, false),
		"GetVideoID":   kitex.NewMethodInfo(getVideoIDHandler, newIdGeneratorServiceGetVideoIDArgs, newIdGeneratorServiceGetVideoIDResult, false),
		"GetCommentID": kitex.NewMethodInfo(getCommentIDHandler, newIdGeneratorServiceGetCommentIDArgs, newIdGeneratorServiceGetCommentIDResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "id_generator",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func getUserIDHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*id_generator.IdGeneratorServiceGetUserIDArgs)
	realResult := result.(*id_generator.IdGeneratorServiceGetUserIDResult)
	success, err := handler.(id_generator.IdGeneratorService).GetUserID(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newIdGeneratorServiceGetUserIDArgs() interface{} {
	return id_generator.NewIdGeneratorServiceGetUserIDArgs()
}

func newIdGeneratorServiceGetUserIDResult() interface{} {
	return id_generator.NewIdGeneratorServiceGetUserIDResult()
}

func getVideoIDHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*id_generator.IdGeneratorServiceGetVideoIDArgs)
	realResult := result.(*id_generator.IdGeneratorServiceGetVideoIDResult)
	success, err := handler.(id_generator.IdGeneratorService).GetVideoID(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newIdGeneratorServiceGetVideoIDArgs() interface{} {
	return id_generator.NewIdGeneratorServiceGetVideoIDArgs()
}

func newIdGeneratorServiceGetVideoIDResult() interface{} {
	return id_generator.NewIdGeneratorServiceGetVideoIDResult()
}

func getCommentIDHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*id_generator.IdGeneratorServiceGetCommentIDArgs)
	realResult := result.(*id_generator.IdGeneratorServiceGetCommentIDResult)
	success, err := handler.(id_generator.IdGeneratorService).GetCommentID(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newIdGeneratorServiceGetCommentIDArgs() interface{} {
	return id_generator.NewIdGeneratorServiceGetCommentIDArgs()
}

func newIdGeneratorServiceGetCommentIDResult() interface{} {
	return id_generator.NewIdGeneratorServiceGetCommentIDResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetUserID(ctx context.Context, req *id_generator.GetUserIdRequest) (r *id_generator.GetUserIdResponse, err error) {
	var _args id_generator.IdGeneratorServiceGetUserIDArgs
	_args.Req = req
	var _result id_generator.IdGeneratorServiceGetUserIDResult
	if err = p.c.Call(ctx, "GetUserID", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoID(ctx context.Context, req *id_generator.GetVideoIdRequest) (r *id_generator.GetVideoIdResponse, err error) {
	var _args id_generator.IdGeneratorServiceGetVideoIDArgs
	_args.Req = req
	var _result id_generator.IdGeneratorServiceGetVideoIDResult
	if err = p.c.Call(ctx, "GetVideoID", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCommentID(ctx context.Context, req *id_generator.GetCommentIdRequest) (r *id_generator.GetCommentIdResponse, err error) {
	var _args id_generator.IdGeneratorServiceGetCommentIDArgs
	_args.Req = req
	var _result id_generator.IdGeneratorServiceGetCommentIDResult
	if err = p.c.Call(ctx, "GetCommentID", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
