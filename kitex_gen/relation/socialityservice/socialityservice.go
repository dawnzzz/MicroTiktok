// Code generated by Kitex v0.5.2. DO NOT EDIT.

package socialityservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	relation "github.com/dawnzzz/MicroTiktok/kitex_gen/relation"
)

func serviceInfo() *kitex.ServiceInfo {
	return socialityServiceServiceInfo
}

var socialityServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "SocialityService"
	handlerType := (*relation.SocialityService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Relation":        kitex.NewMethodInfo(relationHandler, newSocialityServiceRelationArgs, newSocialityServiceRelationResult, false),
		"RelationCancel":  kitex.NewMethodInfo(relationCancelHandler, newSocialityServiceRelationCancelArgs, newSocialityServiceRelationCancelResult, false),
		"GetFollowList":   kitex.NewMethodInfo(getFollowListHandler, newSocialityServiceGetFollowListArgs, newSocialityServiceGetFollowListResult, false),
		"GetFollowerList": kitex.NewMethodInfo(getFollowerListHandler, newSocialityServiceGetFollowerListArgs, newSocialityServiceGetFollowerListResult, false),
		"GetFriendList":   kitex.NewMethodInfo(getFriendListHandler, newSocialityServiceGetFriendListArgs, newSocialityServiceGetFriendListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "relation",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func relationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.SocialityServiceRelationArgs)
	realResult := result.(*relation.SocialityServiceRelationResult)
	success, err := handler.(relation.SocialityService).Relation(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocialityServiceRelationArgs() interface{} {
	return relation.NewSocialityServiceRelationArgs()
}

func newSocialityServiceRelationResult() interface{} {
	return relation.NewSocialityServiceRelationResult()
}

func relationCancelHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.SocialityServiceRelationCancelArgs)
	realResult := result.(*relation.SocialityServiceRelationCancelResult)
	success, err := handler.(relation.SocialityService).RelationCancel(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocialityServiceRelationCancelArgs() interface{} {
	return relation.NewSocialityServiceRelationCancelArgs()
}

func newSocialityServiceRelationCancelResult() interface{} {
	return relation.NewSocialityServiceRelationCancelResult()
}

func getFollowListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.SocialityServiceGetFollowListArgs)
	realResult := result.(*relation.SocialityServiceGetFollowListResult)
	success, err := handler.(relation.SocialityService).GetFollowList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocialityServiceGetFollowListArgs() interface{} {
	return relation.NewSocialityServiceGetFollowListArgs()
}

func newSocialityServiceGetFollowListResult() interface{} {
	return relation.NewSocialityServiceGetFollowListResult()
}

func getFollowerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.SocialityServiceGetFollowerListArgs)
	realResult := result.(*relation.SocialityServiceGetFollowerListResult)
	success, err := handler.(relation.SocialityService).GetFollowerList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocialityServiceGetFollowerListArgs() interface{} {
	return relation.NewSocialityServiceGetFollowerListArgs()
}

func newSocialityServiceGetFollowerListResult() interface{} {
	return relation.NewSocialityServiceGetFollowerListResult()
}

func getFriendListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.SocialityServiceGetFriendListArgs)
	realResult := result.(*relation.SocialityServiceGetFriendListResult)
	success, err := handler.(relation.SocialityService).GetFriendList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocialityServiceGetFriendListArgs() interface{} {
	return relation.NewSocialityServiceGetFriendListArgs()
}

func newSocialityServiceGetFriendListResult() interface{} {
	return relation.NewSocialityServiceGetFriendListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Relation(ctx context.Context, req *relation.RelationRequest) (r *relation.RelationResponse, err error) {
	var _args relation.SocialityServiceRelationArgs
	_args.Req = req
	var _result relation.SocialityServiceRelationResult
	if err = p.c.Call(ctx, "Relation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RelationCancel(ctx context.Context, req *relation.RelationCancelRequest) (r *relation.RelationCancelResponse, err error) {
	var _args relation.SocialityServiceRelationCancelArgs
	_args.Req = req
	var _result relation.SocialityServiceRelationCancelResult
	if err = p.c.Call(ctx, "RelationCancel", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowList(ctx context.Context, req *relation.GetRelationFollowListRequest) (r *relation.GetRelationFollowListResponse, err error) {
	var _args relation.SocialityServiceGetFollowListArgs
	_args.Req = req
	var _result relation.SocialityServiceGetFollowListResult
	if err = p.c.Call(ctx, "GetFollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowerList(ctx context.Context, req *relation.GetRelationFollowerListRequest) (r *relation.GetRelationFollowerListResponse, err error) {
	var _args relation.SocialityServiceGetFollowerListArgs
	_args.Req = req
	var _result relation.SocialityServiceGetFollowerListResult
	if err = p.c.Call(ctx, "GetFollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFriendList(ctx context.Context, req *relation.GetRelationFriendListRequest) (r *relation.GetRelationFriendListResponse, err error) {
	var _args relation.SocialityServiceGetFriendListArgs
	_args.Req = req
	var _result relation.SocialityServiceGetFriendListResult
	if err = p.c.Call(ctx, "GetFriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
