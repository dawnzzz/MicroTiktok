// Code generated by thriftgo (0.2.9). DO NOT EDIT.

package interact

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/dawnzzz/MicroTiktok/kitex_gen/base"
)

type GetVideoInteractInfoRequest struct {
	VideoId  int64 `thrift:"video_id,1" frugal:"1,default,i64" json:"video_id"`
	ViewerId int64 `thrift:"viewer_id,2" frugal:"2,default,i64" json:"viewer_id"`
}

func NewGetVideoInteractInfoRequest() *GetVideoInteractInfoRequest {
	return &GetVideoInteractInfoRequest{}
}

func (p *GetVideoInteractInfoRequest) InitDefault() {
	*p = GetVideoInteractInfoRequest{}
}

func (p *GetVideoInteractInfoRequest) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *GetVideoInteractInfoRequest) GetViewerId() (v int64) {
	return p.ViewerId
}
func (p *GetVideoInteractInfoRequest) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *GetVideoInteractInfoRequest) SetViewerId(val int64) {
	p.ViewerId = val
}

var fieldIDToName_GetVideoInteractInfoRequest = map[int16]string{
	1: "video_id",
	2: "viewer_id",
}

func (p *GetVideoInteractInfoRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetVideoInteractInfoRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetVideoInteractInfoRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.VideoId = v
	}
	return nil
}

func (p *GetVideoInteractInfoRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ViewerId = v
	}
	return nil
}

func (p *GetVideoInteractInfoRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("get_video_interact_info_request"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetVideoInteractInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("video_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.VideoId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetVideoInteractInfoRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("viewer_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ViewerId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetVideoInteractInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetVideoInteractInfoRequest(%+v)", *p)
}

func (p *GetVideoInteractInfoRequest) DeepEqual(ano *GetVideoInteractInfoRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.VideoId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ViewerId) {
		return false
	}
	return true
}

func (p *GetVideoInteractInfoRequest) Field1DeepEqual(src int64) bool {

	if p.VideoId != src {
		return false
	}
	return true
}
func (p *GetVideoInteractInfoRequest) Field2DeepEqual(src int64) bool {

	if p.ViewerId != src {
		return false
	}
	return true
}

type GetVideoInteractInfoResponse struct {
	BaseResp     *base.BaseResponse      `thrift:"base_resp,1" frugal:"1,default,base.BaseResponse" json:"base_resp"`
	InteractInfo *base.VideoInteractInfo `thrift:"interact_info,2" frugal:"2,default,base.VideoInteractInfo" json:"interact_info"`
}

func NewGetVideoInteractInfoResponse() *GetVideoInteractInfoResponse {
	return &GetVideoInteractInfoResponse{}
}

func (p *GetVideoInteractInfoResponse) InitDefault() {
	*p = GetVideoInteractInfoResponse{}
}

var GetVideoInteractInfoResponse_BaseResp_DEFAULT *base.BaseResponse

func (p *GetVideoInteractInfoResponse) GetBaseResp() (v *base.BaseResponse) {
	if !p.IsSetBaseResp() {
		return GetVideoInteractInfoResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}

var GetVideoInteractInfoResponse_InteractInfo_DEFAULT *base.VideoInteractInfo

func (p *GetVideoInteractInfoResponse) GetInteractInfo() (v *base.VideoInteractInfo) {
	if !p.IsSetInteractInfo() {
		return GetVideoInteractInfoResponse_InteractInfo_DEFAULT
	}
	return p.InteractInfo
}
func (p *GetVideoInteractInfoResponse) SetBaseResp(val *base.BaseResponse) {
	p.BaseResp = val
}
func (p *GetVideoInteractInfoResponse) SetInteractInfo(val *base.VideoInteractInfo) {
	p.InteractInfo = val
}

var fieldIDToName_GetVideoInteractInfoResponse = map[int16]string{
	1: "base_resp",
	2: "interact_info",
}

func (p *GetVideoInteractInfoResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetVideoInteractInfoResponse) IsSetInteractInfo() bool {
	return p.InteractInfo != nil
}

func (p *GetVideoInteractInfoResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetVideoInteractInfoResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetVideoInteractInfoResponse) ReadField1(iprot thrift.TProtocol) error {
	p.BaseResp = base.NewBaseResponse()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetVideoInteractInfoResponse) ReadField2(iprot thrift.TProtocol) error {
	p.InteractInfo = base.NewVideoInteractInfo()
	if err := p.InteractInfo.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetVideoInteractInfoResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("get_video_interact_info_response"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetVideoInteractInfoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetVideoInteractInfoResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("interact_info", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.InteractInfo.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetVideoInteractInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetVideoInteractInfoResponse(%+v)", *p)
}

func (p *GetVideoInteractInfoResponse) DeepEqual(ano *GetVideoInteractInfoResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	if !p.Field2DeepEqual(ano.InteractInfo) {
		return false
	}
	return true
}

func (p *GetVideoInteractInfoResponse) Field1DeepEqual(src *base.BaseResponse) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetVideoInteractInfoResponse) Field2DeepEqual(src *base.VideoInteractInfo) bool {

	if !p.InteractInfo.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetVideoInteractInfoRequest struct {
	VideoIdList []int64 `thrift:"video_id_list,1" frugal:"1,default,list<i64>" json:"video_id_list"`
	ViewerId    int64   `thrift:"viewer_id,2" frugal:"2,default,i64" json:"viewer_id"`
}

func NewBatchGetVideoInteractInfoRequest() *BatchGetVideoInteractInfoRequest {
	return &BatchGetVideoInteractInfoRequest{}
}

func (p *BatchGetVideoInteractInfoRequest) InitDefault() {
	*p = BatchGetVideoInteractInfoRequest{}
}

func (p *BatchGetVideoInteractInfoRequest) GetVideoIdList() (v []int64) {
	return p.VideoIdList
}

func (p *BatchGetVideoInteractInfoRequest) GetViewerId() (v int64) {
	return p.ViewerId
}
func (p *BatchGetVideoInteractInfoRequest) SetVideoIdList(val []int64) {
	p.VideoIdList = val
}
func (p *BatchGetVideoInteractInfoRequest) SetViewerId(val int64) {
	p.ViewerId = val
}

var fieldIDToName_BatchGetVideoInteractInfoRequest = map[int16]string{
	1: "video_id_list",
	2: "viewer_id",
}

func (p *BatchGetVideoInteractInfoRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetVideoInteractInfoRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchGetVideoInteractInfoRequest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.VideoIdList = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.VideoIdList = append(p.VideoIdList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *BatchGetVideoInteractInfoRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ViewerId = v
	}
	return nil
}

func (p *BatchGetVideoInteractInfoRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("batch_get_video_interact_info_request"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetVideoInteractInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("video_id_list", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.VideoIdList)); err != nil {
		return err
	}
	for _, v := range p.VideoIdList {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BatchGetVideoInteractInfoRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("viewer_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ViewerId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BatchGetVideoInteractInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetVideoInteractInfoRequest(%+v)", *p)
}

func (p *BatchGetVideoInteractInfoRequest) DeepEqual(ano *BatchGetVideoInteractInfoRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.VideoIdList) {
		return false
	}
	if !p.Field2DeepEqual(ano.ViewerId) {
		return false
	}
	return true
}

func (p *BatchGetVideoInteractInfoRequest) Field1DeepEqual(src []int64) bool {

	if len(p.VideoIdList) != len(src) {
		return false
	}
	for i, v := range p.VideoIdList {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *BatchGetVideoInteractInfoRequest) Field2DeepEqual(src int64) bool {

	if p.ViewerId != src {
		return false
	}
	return true
}

type BatchGetVideoInteractInfoResponse struct {
	BaseResp         *base.BaseResponse        `thrift:"base_resp,1" frugal:"1,default,base.BaseResponse" json:"base_resp"`
	InteractInfoList []*base.VideoInteractInfo `thrift:"interact_info_list,2" frugal:"2,default,list<base.VideoInteractInfo>" json:"interact_info_list"`
}

func NewBatchGetVideoInteractInfoResponse() *BatchGetVideoInteractInfoResponse {
	return &BatchGetVideoInteractInfoResponse{}
}

func (p *BatchGetVideoInteractInfoResponse) InitDefault() {
	*p = BatchGetVideoInteractInfoResponse{}
}

var BatchGetVideoInteractInfoResponse_BaseResp_DEFAULT *base.BaseResponse

func (p *BatchGetVideoInteractInfoResponse) GetBaseResp() (v *base.BaseResponse) {
	if !p.IsSetBaseResp() {
		return BatchGetVideoInteractInfoResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}

func (p *BatchGetVideoInteractInfoResponse) GetInteractInfoList() (v []*base.VideoInteractInfo) {
	return p.InteractInfoList
}
func (p *BatchGetVideoInteractInfoResponse) SetBaseResp(val *base.BaseResponse) {
	p.BaseResp = val
}
func (p *BatchGetVideoInteractInfoResponse) SetInteractInfoList(val []*base.VideoInteractInfo) {
	p.InteractInfoList = val
}

var fieldIDToName_BatchGetVideoInteractInfoResponse = map[int16]string{
	1: "base_resp",
	2: "interact_info_list",
}

func (p *BatchGetVideoInteractInfoResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchGetVideoInteractInfoResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetVideoInteractInfoResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchGetVideoInteractInfoResponse) ReadField1(iprot thrift.TProtocol) error {
	p.BaseResp = base.NewBaseResponse()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BatchGetVideoInteractInfoResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.InteractInfoList = make([]*base.VideoInteractInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewVideoInteractInfo()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.InteractInfoList = append(p.InteractInfoList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *BatchGetVideoInteractInfoResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("batch_get_video_interact_info_response"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetVideoInteractInfoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BatchGetVideoInteractInfoResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("interact_info_list", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.InteractInfoList)); err != nil {
		return err
	}
	for _, v := range p.InteractInfoList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BatchGetVideoInteractInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetVideoInteractInfoResponse(%+v)", *p)
}

func (p *BatchGetVideoInteractInfoResponse) DeepEqual(ano *BatchGetVideoInteractInfoResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	if !p.Field2DeepEqual(ano.InteractInfoList) {
		return false
	}
	return true
}

func (p *BatchGetVideoInteractInfoResponse) Field1DeepEqual(src *base.BaseResponse) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *BatchGetVideoInteractInfoResponse) Field2DeepEqual(src []*base.VideoInteractInfo) bool {

	if len(p.InteractInfoList) != len(src) {
		return false
	}
	for i, v := range p.InteractInfoList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type GetUserInteractInfoRequest struct {
	UserId int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
}

func NewGetUserInteractInfoRequest() *GetUserInteractInfoRequest {
	return &GetUserInteractInfoRequest{}
}

func (p *GetUserInteractInfoRequest) InitDefault() {
	*p = GetUserInteractInfoRequest{}
}

func (p *GetUserInteractInfoRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *GetUserInteractInfoRequest) SetUserId(val int64) {
	p.UserId = val
}

var fieldIDToName_GetUserInteractInfoRequest = map[int16]string{
	1: "user_id",
}

func (p *GetUserInteractInfoRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetUserInteractInfoRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetUserInteractInfoRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *GetUserInteractInfoRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("get_user_interact_info_request"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetUserInteractInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetUserInteractInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserInteractInfoRequest(%+v)", *p)
}

func (p *GetUserInteractInfoRequest) DeepEqual(ano *GetUserInteractInfoRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *GetUserInteractInfoRequest) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

type GetUserInteractInfoResponse struct {
	BaseResp     *base.BaseResponse     `thrift:"base_resp,1" frugal:"1,default,base.BaseResponse" json:"base_resp"`
	InteractInfo *base.UserInteractInfo `thrift:"interact_info,2" frugal:"2,default,base.UserInteractInfo" json:"interact_info"`
}

func NewGetUserInteractInfoResponse() *GetUserInteractInfoResponse {
	return &GetUserInteractInfoResponse{}
}

func (p *GetUserInteractInfoResponse) InitDefault() {
	*p = GetUserInteractInfoResponse{}
}

var GetUserInteractInfoResponse_BaseResp_DEFAULT *base.BaseResponse

func (p *GetUserInteractInfoResponse) GetBaseResp() (v *base.BaseResponse) {
	if !p.IsSetBaseResp() {
		return GetUserInteractInfoResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}

var GetUserInteractInfoResponse_InteractInfo_DEFAULT *base.UserInteractInfo

func (p *GetUserInteractInfoResponse) GetInteractInfo() (v *base.UserInteractInfo) {
	if !p.IsSetInteractInfo() {
		return GetUserInteractInfoResponse_InteractInfo_DEFAULT
	}
	return p.InteractInfo
}
func (p *GetUserInteractInfoResponse) SetBaseResp(val *base.BaseResponse) {
	p.BaseResp = val
}
func (p *GetUserInteractInfoResponse) SetInteractInfo(val *base.UserInteractInfo) {
	p.InteractInfo = val
}

var fieldIDToName_GetUserInteractInfoResponse = map[int16]string{
	1: "base_resp",
	2: "interact_info",
}

func (p *GetUserInteractInfoResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetUserInteractInfoResponse) IsSetInteractInfo() bool {
	return p.InteractInfo != nil
}

func (p *GetUserInteractInfoResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetUserInteractInfoResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetUserInteractInfoResponse) ReadField1(iprot thrift.TProtocol) error {
	p.BaseResp = base.NewBaseResponse()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetUserInteractInfoResponse) ReadField2(iprot thrift.TProtocol) error {
	p.InteractInfo = base.NewUserInteractInfo()
	if err := p.InteractInfo.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetUserInteractInfoResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("get_user_interact_info_response"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetUserInteractInfoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetUserInteractInfoResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("interact_info", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.InteractInfo.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetUserInteractInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserInteractInfoResponse(%+v)", *p)
}

func (p *GetUserInteractInfoResponse) DeepEqual(ano *GetUserInteractInfoResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	if !p.Field2DeepEqual(ano.InteractInfo) {
		return false
	}
	return true
}

func (p *GetUserInteractInfoResponse) Field1DeepEqual(src *base.BaseResponse) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetUserInteractInfoResponse) Field2DeepEqual(src *base.UserInteractInfo) bool {

	if !p.InteractInfo.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetUserInteractInfoRequest struct {
	UserIdList []int64 `thrift:"user_id_list,1" frugal:"1,default,list<i64>" json:"user_id_list"`
}

func NewBatchGetUserInteractInfoRequest() *BatchGetUserInteractInfoRequest {
	return &BatchGetUserInteractInfoRequest{}
}

func (p *BatchGetUserInteractInfoRequest) InitDefault() {
	*p = BatchGetUserInteractInfoRequest{}
}

func (p *BatchGetUserInteractInfoRequest) GetUserIdList() (v []int64) {
	return p.UserIdList
}
func (p *BatchGetUserInteractInfoRequest) SetUserIdList(val []int64) {
	p.UserIdList = val
}

var fieldIDToName_BatchGetUserInteractInfoRequest = map[int16]string{
	1: "user_id_list",
}

func (p *BatchGetUserInteractInfoRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetUserInteractInfoRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchGetUserInteractInfoRequest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.UserIdList = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.UserIdList = append(p.UserIdList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *BatchGetUserInteractInfoRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("batch_get_user_interact_info_request"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetUserInteractInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id_list", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.UserIdList)); err != nil {
		return err
	}
	for _, v := range p.UserIdList {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BatchGetUserInteractInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetUserInteractInfoRequest(%+v)", *p)
}

func (p *BatchGetUserInteractInfoRequest) DeepEqual(ano *BatchGetUserInteractInfoRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserIdList) {
		return false
	}
	return true
}

func (p *BatchGetUserInteractInfoRequest) Field1DeepEqual(src []int64) bool {

	if len(p.UserIdList) != len(src) {
		return false
	}
	for i, v := range p.UserIdList {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type BatchGetUserInteractInfoResponse struct {
	BaseResp         *base.BaseResponse       `thrift:"base_resp,1" frugal:"1,default,base.BaseResponse" json:"base_resp"`
	InteractInfoList []*base.UserInteractInfo `thrift:"interact_info_list,2" frugal:"2,default,list<base.UserInteractInfo>" json:"interact_info_list"`
}

func NewBatchGetUserInteractInfoResponse() *BatchGetUserInteractInfoResponse {
	return &BatchGetUserInteractInfoResponse{}
}

func (p *BatchGetUserInteractInfoResponse) InitDefault() {
	*p = BatchGetUserInteractInfoResponse{}
}

var BatchGetUserInteractInfoResponse_BaseResp_DEFAULT *base.BaseResponse

func (p *BatchGetUserInteractInfoResponse) GetBaseResp() (v *base.BaseResponse) {
	if !p.IsSetBaseResp() {
		return BatchGetUserInteractInfoResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}

func (p *BatchGetUserInteractInfoResponse) GetInteractInfoList() (v []*base.UserInteractInfo) {
	return p.InteractInfoList
}
func (p *BatchGetUserInteractInfoResponse) SetBaseResp(val *base.BaseResponse) {
	p.BaseResp = val
}
func (p *BatchGetUserInteractInfoResponse) SetInteractInfoList(val []*base.UserInteractInfo) {
	p.InteractInfoList = val
}

var fieldIDToName_BatchGetUserInteractInfoResponse = map[int16]string{
	1: "base_resp",
	2: "interact_info_list",
}

func (p *BatchGetUserInteractInfoResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchGetUserInteractInfoResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetUserInteractInfoResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchGetUserInteractInfoResponse) ReadField1(iprot thrift.TProtocol) error {
	p.BaseResp = base.NewBaseResponse()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BatchGetUserInteractInfoResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.InteractInfoList = make([]*base.UserInteractInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewUserInteractInfo()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.InteractInfoList = append(p.InteractInfoList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *BatchGetUserInteractInfoResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("batch_get_user_interact_info_response"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetUserInteractInfoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BatchGetUserInteractInfoResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("interact_info_list", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.InteractInfoList)); err != nil {
		return err
	}
	for _, v := range p.InteractInfoList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BatchGetUserInteractInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetUserInteractInfoResponse(%+v)", *p)
}

func (p *BatchGetUserInteractInfoResponse) DeepEqual(ano *BatchGetUserInteractInfoResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	if !p.Field2DeepEqual(ano.InteractInfoList) {
		return false
	}
	return true
}

func (p *BatchGetUserInteractInfoResponse) Field1DeepEqual(src *base.BaseResponse) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *BatchGetUserInteractInfoResponse) Field2DeepEqual(src []*base.UserInteractInfo) bool {

	if len(p.InteractInfoList) != len(src) {
		return false
	}
	for i, v := range p.InteractInfoList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type InteractService interface {
	GetVideoInteractInfo(ctx context.Context, req *GetVideoInteractInfoRequest) (r *GetVideoInteractInfoResponse, err error)

	BatchGetVideoInteractInfo(ctx context.Context, req *BatchGetVideoInteractInfoRequest) (r *BatchGetVideoInteractInfoResponse, err error)

	GetUserInteractInfo(ctx context.Context, req *GetUserInteractInfoRequest) (r *GetUserInteractInfoResponse, err error)

	BatchGetUserInteractInfo(ctx context.Context, req *BatchGetUserInteractInfoRequest) (r *BatchGetUserInteractInfoResponse, err error)
}

type InteractServiceClient struct {
	c thrift.TClient
}

func NewInteractServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *InteractServiceClient {
	return &InteractServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewInteractServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *InteractServiceClient {
	return &InteractServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewInteractServiceClient(c thrift.TClient) *InteractServiceClient {
	return &InteractServiceClient{
		c: c,
	}
}

func (p *InteractServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *InteractServiceClient) GetVideoInteractInfo(ctx context.Context, req *GetVideoInteractInfoRequest) (r *GetVideoInteractInfoResponse, err error) {
	var _args InteractServiceGetVideoInteractInfoArgs
	_args.Req = req
	var _result InteractServiceGetVideoInteractInfoResult
	if err = p.Client_().Call(ctx, "GetVideoInteractInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *InteractServiceClient) BatchGetVideoInteractInfo(ctx context.Context, req *BatchGetVideoInteractInfoRequest) (r *BatchGetVideoInteractInfoResponse, err error) {
	var _args InteractServiceBatchGetVideoInteractInfoArgs
	_args.Req = req
	var _result InteractServiceBatchGetVideoInteractInfoResult
	if err = p.Client_().Call(ctx, "BatchGetVideoInteractInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *InteractServiceClient) GetUserInteractInfo(ctx context.Context, req *GetUserInteractInfoRequest) (r *GetUserInteractInfoResponse, err error) {
	var _args InteractServiceGetUserInteractInfoArgs
	_args.Req = req
	var _result InteractServiceGetUserInteractInfoResult
	if err = p.Client_().Call(ctx, "GetUserInteractInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *InteractServiceClient) BatchGetUserInteractInfo(ctx context.Context, req *BatchGetUserInteractInfoRequest) (r *BatchGetUserInteractInfoResponse, err error) {
	var _args InteractServiceBatchGetUserInteractInfoArgs
	_args.Req = req
	var _result InteractServiceBatchGetUserInteractInfoResult
	if err = p.Client_().Call(ctx, "BatchGetUserInteractInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type InteractServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      InteractService
}

func (p *InteractServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *InteractServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *InteractServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewInteractServiceProcessor(handler InteractService) *InteractServiceProcessor {
	self := &InteractServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("GetVideoInteractInfo", &interactServiceProcessorGetVideoInteractInfo{handler: handler})
	self.AddToProcessorMap("BatchGetVideoInteractInfo", &interactServiceProcessorBatchGetVideoInteractInfo{handler: handler})
	self.AddToProcessorMap("GetUserInteractInfo", &interactServiceProcessorGetUserInteractInfo{handler: handler})
	self.AddToProcessorMap("BatchGetUserInteractInfo", &interactServiceProcessorBatchGetUserInteractInfo{handler: handler})
	return self
}
func (p *InteractServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type interactServiceProcessorGetVideoInteractInfo struct {
	handler InteractService
}

func (p *interactServiceProcessorGetVideoInteractInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := InteractServiceGetVideoInteractInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetVideoInteractInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := InteractServiceGetVideoInteractInfoResult{}
	var retval *GetVideoInteractInfoResponse
	if retval, err2 = p.handler.GetVideoInteractInfo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetVideoInteractInfo: "+err2.Error())
		oprot.WriteMessageBegin("GetVideoInteractInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetVideoInteractInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type interactServiceProcessorBatchGetVideoInteractInfo struct {
	handler InteractService
}

func (p *interactServiceProcessorBatchGetVideoInteractInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := InteractServiceBatchGetVideoInteractInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchGetVideoInteractInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := InteractServiceBatchGetVideoInteractInfoResult{}
	var retval *BatchGetVideoInteractInfoResponse
	if retval, err2 = p.handler.BatchGetVideoInteractInfo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchGetVideoInteractInfo: "+err2.Error())
		oprot.WriteMessageBegin("BatchGetVideoInteractInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchGetVideoInteractInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type interactServiceProcessorGetUserInteractInfo struct {
	handler InteractService
}

func (p *interactServiceProcessorGetUserInteractInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := InteractServiceGetUserInteractInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetUserInteractInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := InteractServiceGetUserInteractInfoResult{}
	var retval *GetUserInteractInfoResponse
	if retval, err2 = p.handler.GetUserInteractInfo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetUserInteractInfo: "+err2.Error())
		oprot.WriteMessageBegin("GetUserInteractInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetUserInteractInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type interactServiceProcessorBatchGetUserInteractInfo struct {
	handler InteractService
}

func (p *interactServiceProcessorBatchGetUserInteractInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := InteractServiceBatchGetUserInteractInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchGetUserInteractInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := InteractServiceBatchGetUserInteractInfoResult{}
	var retval *BatchGetUserInteractInfoResponse
	if retval, err2 = p.handler.BatchGetUserInteractInfo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchGetUserInteractInfo: "+err2.Error())
		oprot.WriteMessageBegin("BatchGetUserInteractInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchGetUserInteractInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type InteractServiceGetVideoInteractInfoArgs struct {
	Req *GetVideoInteractInfoRequest `thrift:"req,1" frugal:"1,default,GetVideoInteractInfoRequest" json:"req"`
}

func NewInteractServiceGetVideoInteractInfoArgs() *InteractServiceGetVideoInteractInfoArgs {
	return &InteractServiceGetVideoInteractInfoArgs{}
}

func (p *InteractServiceGetVideoInteractInfoArgs) InitDefault() {
	*p = InteractServiceGetVideoInteractInfoArgs{}
}

var InteractServiceGetVideoInteractInfoArgs_Req_DEFAULT *GetVideoInteractInfoRequest

func (p *InteractServiceGetVideoInteractInfoArgs) GetReq() (v *GetVideoInteractInfoRequest) {
	if !p.IsSetReq() {
		return InteractServiceGetVideoInteractInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractServiceGetVideoInteractInfoArgs) SetReq(val *GetVideoInteractInfoRequest) {
	p.Req = val
}

var fieldIDToName_InteractServiceGetVideoInteractInfoArgs = map[int16]string{
	1: "req",
}

func (p *InteractServiceGetVideoInteractInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractServiceGetVideoInteractInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InteractServiceGetVideoInteractInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InteractServiceGetVideoInteractInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetVideoInteractInfoRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *InteractServiceGetVideoInteractInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetVideoInteractInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InteractServiceGetVideoInteractInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *InteractServiceGetVideoInteractInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractServiceGetVideoInteractInfoArgs(%+v)", *p)
}

func (p *InteractServiceGetVideoInteractInfoArgs) DeepEqual(ano *InteractServiceGetVideoInteractInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *InteractServiceGetVideoInteractInfoArgs) Field1DeepEqual(src *GetVideoInteractInfoRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type InteractServiceGetVideoInteractInfoResult struct {
	Success *GetVideoInteractInfoResponse `thrift:"success,0,optional" frugal:"0,optional,GetVideoInteractInfoResponse" json:"success,omitempty"`
}

func NewInteractServiceGetVideoInteractInfoResult() *InteractServiceGetVideoInteractInfoResult {
	return &InteractServiceGetVideoInteractInfoResult{}
}

func (p *InteractServiceGetVideoInteractInfoResult) InitDefault() {
	*p = InteractServiceGetVideoInteractInfoResult{}
}

var InteractServiceGetVideoInteractInfoResult_Success_DEFAULT *GetVideoInteractInfoResponse

func (p *InteractServiceGetVideoInteractInfoResult) GetSuccess() (v *GetVideoInteractInfoResponse) {
	if !p.IsSetSuccess() {
		return InteractServiceGetVideoInteractInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractServiceGetVideoInteractInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetVideoInteractInfoResponse)
}

var fieldIDToName_InteractServiceGetVideoInteractInfoResult = map[int16]string{
	0: "success",
}

func (p *InteractServiceGetVideoInteractInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractServiceGetVideoInteractInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InteractServiceGetVideoInteractInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InteractServiceGetVideoInteractInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetVideoInteractInfoResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *InteractServiceGetVideoInteractInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetVideoInteractInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InteractServiceGetVideoInteractInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *InteractServiceGetVideoInteractInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractServiceGetVideoInteractInfoResult(%+v)", *p)
}

func (p *InteractServiceGetVideoInteractInfoResult) DeepEqual(ano *InteractServiceGetVideoInteractInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *InteractServiceGetVideoInteractInfoResult) Field0DeepEqual(src *GetVideoInteractInfoResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type InteractServiceBatchGetVideoInteractInfoArgs struct {
	Req *BatchGetVideoInteractInfoRequest `thrift:"req,1" frugal:"1,default,BatchGetVideoInteractInfoRequest" json:"req"`
}

func NewInteractServiceBatchGetVideoInteractInfoArgs() *InteractServiceBatchGetVideoInteractInfoArgs {
	return &InteractServiceBatchGetVideoInteractInfoArgs{}
}

func (p *InteractServiceBatchGetVideoInteractInfoArgs) InitDefault() {
	*p = InteractServiceBatchGetVideoInteractInfoArgs{}
}

var InteractServiceBatchGetVideoInteractInfoArgs_Req_DEFAULT *BatchGetVideoInteractInfoRequest

func (p *InteractServiceBatchGetVideoInteractInfoArgs) GetReq() (v *BatchGetVideoInteractInfoRequest) {
	if !p.IsSetReq() {
		return InteractServiceBatchGetVideoInteractInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractServiceBatchGetVideoInteractInfoArgs) SetReq(val *BatchGetVideoInteractInfoRequest) {
	p.Req = val
}

var fieldIDToName_InteractServiceBatchGetVideoInteractInfoArgs = map[int16]string{
	1: "req",
}

func (p *InteractServiceBatchGetVideoInteractInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractServiceBatchGetVideoInteractInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InteractServiceBatchGetVideoInteractInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InteractServiceBatchGetVideoInteractInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewBatchGetVideoInteractInfoRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *InteractServiceBatchGetVideoInteractInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetVideoInteractInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InteractServiceBatchGetVideoInteractInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *InteractServiceBatchGetVideoInteractInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractServiceBatchGetVideoInteractInfoArgs(%+v)", *p)
}

func (p *InteractServiceBatchGetVideoInteractInfoArgs) DeepEqual(ano *InteractServiceBatchGetVideoInteractInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *InteractServiceBatchGetVideoInteractInfoArgs) Field1DeepEqual(src *BatchGetVideoInteractInfoRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type InteractServiceBatchGetVideoInteractInfoResult struct {
	Success *BatchGetVideoInteractInfoResponse `thrift:"success,0,optional" frugal:"0,optional,BatchGetVideoInteractInfoResponse" json:"success,omitempty"`
}

func NewInteractServiceBatchGetVideoInteractInfoResult() *InteractServiceBatchGetVideoInteractInfoResult {
	return &InteractServiceBatchGetVideoInteractInfoResult{}
}

func (p *InteractServiceBatchGetVideoInteractInfoResult) InitDefault() {
	*p = InteractServiceBatchGetVideoInteractInfoResult{}
}

var InteractServiceBatchGetVideoInteractInfoResult_Success_DEFAULT *BatchGetVideoInteractInfoResponse

func (p *InteractServiceBatchGetVideoInteractInfoResult) GetSuccess() (v *BatchGetVideoInteractInfoResponse) {
	if !p.IsSetSuccess() {
		return InteractServiceBatchGetVideoInteractInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractServiceBatchGetVideoInteractInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchGetVideoInteractInfoResponse)
}

var fieldIDToName_InteractServiceBatchGetVideoInteractInfoResult = map[int16]string{
	0: "success",
}

func (p *InteractServiceBatchGetVideoInteractInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractServiceBatchGetVideoInteractInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InteractServiceBatchGetVideoInteractInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InteractServiceBatchGetVideoInteractInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewBatchGetVideoInteractInfoResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *InteractServiceBatchGetVideoInteractInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetVideoInteractInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InteractServiceBatchGetVideoInteractInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *InteractServiceBatchGetVideoInteractInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractServiceBatchGetVideoInteractInfoResult(%+v)", *p)
}

func (p *InteractServiceBatchGetVideoInteractInfoResult) DeepEqual(ano *InteractServiceBatchGetVideoInteractInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *InteractServiceBatchGetVideoInteractInfoResult) Field0DeepEqual(src *BatchGetVideoInteractInfoResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type InteractServiceGetUserInteractInfoArgs struct {
	Req *GetUserInteractInfoRequest `thrift:"req,1" frugal:"1,default,GetUserInteractInfoRequest" json:"req"`
}

func NewInteractServiceGetUserInteractInfoArgs() *InteractServiceGetUserInteractInfoArgs {
	return &InteractServiceGetUserInteractInfoArgs{}
}

func (p *InteractServiceGetUserInteractInfoArgs) InitDefault() {
	*p = InteractServiceGetUserInteractInfoArgs{}
}

var InteractServiceGetUserInteractInfoArgs_Req_DEFAULT *GetUserInteractInfoRequest

func (p *InteractServiceGetUserInteractInfoArgs) GetReq() (v *GetUserInteractInfoRequest) {
	if !p.IsSetReq() {
		return InteractServiceGetUserInteractInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractServiceGetUserInteractInfoArgs) SetReq(val *GetUserInteractInfoRequest) {
	p.Req = val
}

var fieldIDToName_InteractServiceGetUserInteractInfoArgs = map[int16]string{
	1: "req",
}

func (p *InteractServiceGetUserInteractInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractServiceGetUserInteractInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InteractServiceGetUserInteractInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InteractServiceGetUserInteractInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetUserInteractInfoRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *InteractServiceGetUserInteractInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserInteractInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InteractServiceGetUserInteractInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *InteractServiceGetUserInteractInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractServiceGetUserInteractInfoArgs(%+v)", *p)
}

func (p *InteractServiceGetUserInteractInfoArgs) DeepEqual(ano *InteractServiceGetUserInteractInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *InteractServiceGetUserInteractInfoArgs) Field1DeepEqual(src *GetUserInteractInfoRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type InteractServiceGetUserInteractInfoResult struct {
	Success *GetUserInteractInfoResponse `thrift:"success,0,optional" frugal:"0,optional,GetUserInteractInfoResponse" json:"success,omitempty"`
}

func NewInteractServiceGetUserInteractInfoResult() *InteractServiceGetUserInteractInfoResult {
	return &InteractServiceGetUserInteractInfoResult{}
}

func (p *InteractServiceGetUserInteractInfoResult) InitDefault() {
	*p = InteractServiceGetUserInteractInfoResult{}
}

var InteractServiceGetUserInteractInfoResult_Success_DEFAULT *GetUserInteractInfoResponse

func (p *InteractServiceGetUserInteractInfoResult) GetSuccess() (v *GetUserInteractInfoResponse) {
	if !p.IsSetSuccess() {
		return InteractServiceGetUserInteractInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractServiceGetUserInteractInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetUserInteractInfoResponse)
}

var fieldIDToName_InteractServiceGetUserInteractInfoResult = map[int16]string{
	0: "success",
}

func (p *InteractServiceGetUserInteractInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractServiceGetUserInteractInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InteractServiceGetUserInteractInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InteractServiceGetUserInteractInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetUserInteractInfoResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *InteractServiceGetUserInteractInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserInteractInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InteractServiceGetUserInteractInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *InteractServiceGetUserInteractInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractServiceGetUserInteractInfoResult(%+v)", *p)
}

func (p *InteractServiceGetUserInteractInfoResult) DeepEqual(ano *InteractServiceGetUserInteractInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *InteractServiceGetUserInteractInfoResult) Field0DeepEqual(src *GetUserInteractInfoResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type InteractServiceBatchGetUserInteractInfoArgs struct {
	Req *BatchGetUserInteractInfoRequest `thrift:"req,1" frugal:"1,default,BatchGetUserInteractInfoRequest" json:"req"`
}

func NewInteractServiceBatchGetUserInteractInfoArgs() *InteractServiceBatchGetUserInteractInfoArgs {
	return &InteractServiceBatchGetUserInteractInfoArgs{}
}

func (p *InteractServiceBatchGetUserInteractInfoArgs) InitDefault() {
	*p = InteractServiceBatchGetUserInteractInfoArgs{}
}

var InteractServiceBatchGetUserInteractInfoArgs_Req_DEFAULT *BatchGetUserInteractInfoRequest

func (p *InteractServiceBatchGetUserInteractInfoArgs) GetReq() (v *BatchGetUserInteractInfoRequest) {
	if !p.IsSetReq() {
		return InteractServiceBatchGetUserInteractInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractServiceBatchGetUserInteractInfoArgs) SetReq(val *BatchGetUserInteractInfoRequest) {
	p.Req = val
}

var fieldIDToName_InteractServiceBatchGetUserInteractInfoArgs = map[int16]string{
	1: "req",
}

func (p *InteractServiceBatchGetUserInteractInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractServiceBatchGetUserInteractInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InteractServiceBatchGetUserInteractInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InteractServiceBatchGetUserInteractInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewBatchGetUserInteractInfoRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *InteractServiceBatchGetUserInteractInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetUserInteractInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InteractServiceBatchGetUserInteractInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *InteractServiceBatchGetUserInteractInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractServiceBatchGetUserInteractInfoArgs(%+v)", *p)
}

func (p *InteractServiceBatchGetUserInteractInfoArgs) DeepEqual(ano *InteractServiceBatchGetUserInteractInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *InteractServiceBatchGetUserInteractInfoArgs) Field1DeepEqual(src *BatchGetUserInteractInfoRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type InteractServiceBatchGetUserInteractInfoResult struct {
	Success *BatchGetUserInteractInfoResponse `thrift:"success,0,optional" frugal:"0,optional,BatchGetUserInteractInfoResponse" json:"success,omitempty"`
}

func NewInteractServiceBatchGetUserInteractInfoResult() *InteractServiceBatchGetUserInteractInfoResult {
	return &InteractServiceBatchGetUserInteractInfoResult{}
}

func (p *InteractServiceBatchGetUserInteractInfoResult) InitDefault() {
	*p = InteractServiceBatchGetUserInteractInfoResult{}
}

var InteractServiceBatchGetUserInteractInfoResult_Success_DEFAULT *BatchGetUserInteractInfoResponse

func (p *InteractServiceBatchGetUserInteractInfoResult) GetSuccess() (v *BatchGetUserInteractInfoResponse) {
	if !p.IsSetSuccess() {
		return InteractServiceBatchGetUserInteractInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractServiceBatchGetUserInteractInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchGetUserInteractInfoResponse)
}

var fieldIDToName_InteractServiceBatchGetUserInteractInfoResult = map[int16]string{
	0: "success",
}

func (p *InteractServiceBatchGetUserInteractInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractServiceBatchGetUserInteractInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InteractServiceBatchGetUserInteractInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InteractServiceBatchGetUserInteractInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewBatchGetUserInteractInfoResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *InteractServiceBatchGetUserInteractInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetUserInteractInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InteractServiceBatchGetUserInteractInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *InteractServiceBatchGetUserInteractInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractServiceBatchGetUserInteractInfoResult(%+v)", *p)
}

func (p *InteractServiceBatchGetUserInteractInfoResult) DeepEqual(ano *InteractServiceBatchGetUserInteractInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *InteractServiceBatchGetUserInteractInfoResult) Field0DeepEqual(src *BatchGetUserInteractInfoResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
