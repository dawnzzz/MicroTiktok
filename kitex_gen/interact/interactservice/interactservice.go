// Code generated by Kitex v0.5.2. DO NOT EDIT.

package interactservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	interact "github.com/dawnzzz/MicroTiktok/kitex_gen/interact"
)

func serviceInfo() *kitex.ServiceInfo {
	return interactServiceServiceInfo
}

var interactServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "InteractService"
	handlerType := (*interact.InteractService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetVideoInteractInfo":      kitex.NewMethodInfo(getVideoInteractInfoHandler, newInteractServiceGetVideoInteractInfoArgs, newInteractServiceGetVideoInteractInfoResult, false),
		"BatchGetVideoInteractInfo": kitex.NewMethodInfo(batchGetVideoInteractInfoHandler, newInteractServiceBatchGetVideoInteractInfoArgs, newInteractServiceBatchGetVideoInteractInfoResult, false),
		"GetUserInteractInfo":       kitex.NewMethodInfo(getUserInteractInfoHandler, newInteractServiceGetUserInteractInfoArgs, newInteractServiceGetUserInteractInfoResult, false),
		"BatchGetUserInteractInfo":  kitex.NewMethodInfo(batchGetUserInteractInfoHandler, newInteractServiceBatchGetUserInteractInfoArgs, newInteractServiceBatchGetUserInteractInfoResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "interact",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func getVideoInteractInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interact.InteractServiceGetVideoInteractInfoArgs)
	realResult := result.(*interact.InteractServiceGetVideoInteractInfoResult)
	success, err := handler.(interact.InteractService).GetVideoInteractInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractServiceGetVideoInteractInfoArgs() interface{} {
	return interact.NewInteractServiceGetVideoInteractInfoArgs()
}

func newInteractServiceGetVideoInteractInfoResult() interface{} {
	return interact.NewInteractServiceGetVideoInteractInfoResult()
}

func batchGetVideoInteractInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interact.InteractServiceBatchGetVideoInteractInfoArgs)
	realResult := result.(*interact.InteractServiceBatchGetVideoInteractInfoResult)
	success, err := handler.(interact.InteractService).BatchGetVideoInteractInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractServiceBatchGetVideoInteractInfoArgs() interface{} {
	return interact.NewInteractServiceBatchGetVideoInteractInfoArgs()
}

func newInteractServiceBatchGetVideoInteractInfoResult() interface{} {
	return interact.NewInteractServiceBatchGetVideoInteractInfoResult()
}

func getUserInteractInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interact.InteractServiceGetUserInteractInfoArgs)
	realResult := result.(*interact.InteractServiceGetUserInteractInfoResult)
	success, err := handler.(interact.InteractService).GetUserInteractInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractServiceGetUserInteractInfoArgs() interface{} {
	return interact.NewInteractServiceGetUserInteractInfoArgs()
}

func newInteractServiceGetUserInteractInfoResult() interface{} {
	return interact.NewInteractServiceGetUserInteractInfoResult()
}

func batchGetUserInteractInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interact.InteractServiceBatchGetUserInteractInfoArgs)
	realResult := result.(*interact.InteractServiceBatchGetUserInteractInfoResult)
	success, err := handler.(interact.InteractService).BatchGetUserInteractInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractServiceBatchGetUserInteractInfoArgs() interface{} {
	return interact.NewInteractServiceBatchGetUserInteractInfoArgs()
}

func newInteractServiceBatchGetUserInteractInfoResult() interface{} {
	return interact.NewInteractServiceBatchGetUserInteractInfoResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetVideoInteractInfo(ctx context.Context, req *interact.GetVideoInteractInfoRequest) (r *interact.GetVideoInteractInfoResponse, err error) {
	var _args interact.InteractServiceGetVideoInteractInfoArgs
	_args.Req = req
	var _result interact.InteractServiceGetVideoInteractInfoResult
	if err = p.c.Call(ctx, "GetVideoInteractInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchGetVideoInteractInfo(ctx context.Context, req *interact.BatchGetVideoInteractInfoRequest) (r *interact.BatchGetVideoInteractInfoResponse, err error) {
	var _args interact.InteractServiceBatchGetVideoInteractInfoArgs
	_args.Req = req
	var _result interact.InteractServiceBatchGetVideoInteractInfoResult
	if err = p.c.Call(ctx, "BatchGetVideoInteractInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserInteractInfo(ctx context.Context, req *interact.GetUserInteractInfoRequest) (r *interact.GetUserInteractInfoResponse, err error) {
	var _args interact.InteractServiceGetUserInteractInfoArgs
	_args.Req = req
	var _result interact.InteractServiceGetUserInteractInfoResult
	if err = p.c.Call(ctx, "GetUserInteractInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchGetUserInteractInfo(ctx context.Context, req *interact.BatchGetUserInteractInfoRequest) (r *interact.BatchGetUserInteractInfoResponse, err error) {
	var _args interact.InteractServiceBatchGetUserInteractInfoArgs
	_args.Req = req
	var _result interact.InteractServiceBatchGetUserInteractInfoResult
	if err = p.c.Call(ctx, "BatchGetUserInteractInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
