// Code generated by thriftgo (0.2.9). DO NOT EDIT.

package society

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/dawnzzz/MicroTiktok/kitex_gen/base"
)

type GetSocialInfoRequest struct {
	ViewerId int64 `thrift:"viewer_id,1" frugal:"1,default,i64" json:"viewer_id"`
	OwnerId  int64 `thrift:"owner_id,2" frugal:"2,default,i64" json:"owner_id"`
}

func NewGetSocialInfoRequest() *GetSocialInfoRequest {
	return &GetSocialInfoRequest{}
}

func (p *GetSocialInfoRequest) InitDefault() {
	*p = GetSocialInfoRequest{}
}

func (p *GetSocialInfoRequest) GetViewerId() (v int64) {
	return p.ViewerId
}

func (p *GetSocialInfoRequest) GetOwnerId() (v int64) {
	return p.OwnerId
}
func (p *GetSocialInfoRequest) SetViewerId(val int64) {
	p.ViewerId = val
}
func (p *GetSocialInfoRequest) SetOwnerId(val int64) {
	p.OwnerId = val
}

var fieldIDToName_GetSocialInfoRequest = map[int16]string{
	1: "viewer_id",
	2: "owner_id",
}

func (p *GetSocialInfoRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetSocialInfoRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetSocialInfoRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ViewerId = v
	}
	return nil
}

func (p *GetSocialInfoRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.OwnerId = v
	}
	return nil
}

func (p *GetSocialInfoRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("get_social_info_request"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetSocialInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("viewer_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ViewerId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetSocialInfoRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("owner_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.OwnerId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetSocialInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSocialInfoRequest(%+v)", *p)
}

func (p *GetSocialInfoRequest) DeepEqual(ano *GetSocialInfoRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ViewerId) {
		return false
	}
	if !p.Field2DeepEqual(ano.OwnerId) {
		return false
	}
	return true
}

func (p *GetSocialInfoRequest) Field1DeepEqual(src int64) bool {

	if p.ViewerId != src {
		return false
	}
	return true
}
func (p *GetSocialInfoRequest) Field2DeepEqual(src int64) bool {

	if p.OwnerId != src {
		return false
	}
	return true
}

type GetSocialInfoResponse struct {
	BaseResp   *base.BaseResponse `thrift:"base_resp,1" frugal:"1,default,base.BaseResponse" json:"base_resp"`
	SocialInfo *base.SocialInfo   `thrift:"social_info,2" frugal:"2,default,base.SocialInfo" json:"social_info"`
}

func NewGetSocialInfoResponse() *GetSocialInfoResponse {
	return &GetSocialInfoResponse{}
}

func (p *GetSocialInfoResponse) InitDefault() {
	*p = GetSocialInfoResponse{}
}

var GetSocialInfoResponse_BaseResp_DEFAULT *base.BaseResponse

func (p *GetSocialInfoResponse) GetBaseResp() (v *base.BaseResponse) {
	if !p.IsSetBaseResp() {
		return GetSocialInfoResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}

var GetSocialInfoResponse_SocialInfo_DEFAULT *base.SocialInfo

func (p *GetSocialInfoResponse) GetSocialInfo() (v *base.SocialInfo) {
	if !p.IsSetSocialInfo() {
		return GetSocialInfoResponse_SocialInfo_DEFAULT
	}
	return p.SocialInfo
}
func (p *GetSocialInfoResponse) SetBaseResp(val *base.BaseResponse) {
	p.BaseResp = val
}
func (p *GetSocialInfoResponse) SetSocialInfo(val *base.SocialInfo) {
	p.SocialInfo = val
}

var fieldIDToName_GetSocialInfoResponse = map[int16]string{
	1: "base_resp",
	2: "social_info",
}

func (p *GetSocialInfoResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetSocialInfoResponse) IsSetSocialInfo() bool {
	return p.SocialInfo != nil
}

func (p *GetSocialInfoResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetSocialInfoResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetSocialInfoResponse) ReadField1(iprot thrift.TProtocol) error {
	p.BaseResp = base.NewBaseResponse()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetSocialInfoResponse) ReadField2(iprot thrift.TProtocol) error {
	p.SocialInfo = base.NewSocialInfo()
	if err := p.SocialInfo.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetSocialInfoResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("get_social_info_response"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetSocialInfoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetSocialInfoResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("social_info", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.SocialInfo.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetSocialInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSocialInfoResponse(%+v)", *p)
}

func (p *GetSocialInfoResponse) DeepEqual(ano *GetSocialInfoResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	if !p.Field2DeepEqual(ano.SocialInfo) {
		return false
	}
	return true
}

func (p *GetSocialInfoResponse) Field1DeepEqual(src *base.BaseResponse) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetSocialInfoResponse) Field2DeepEqual(src *base.SocialInfo) bool {

	if !p.SocialInfo.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetSocialInfoRequest struct {
	ViewerId    int64   `thrift:"viewer_id,1" frugal:"1,default,i64" json:"viewer_id"`
	OwnerIdList []int64 `thrift:"owner_id_list,2" frugal:"2,default,list<i64>" json:"owner_id_list"`
}

func NewBatchGetSocialInfoRequest() *BatchGetSocialInfoRequest {
	return &BatchGetSocialInfoRequest{}
}

func (p *BatchGetSocialInfoRequest) InitDefault() {
	*p = BatchGetSocialInfoRequest{}
}

func (p *BatchGetSocialInfoRequest) GetViewerId() (v int64) {
	return p.ViewerId
}

func (p *BatchGetSocialInfoRequest) GetOwnerIdList() (v []int64) {
	return p.OwnerIdList
}
func (p *BatchGetSocialInfoRequest) SetViewerId(val int64) {
	p.ViewerId = val
}
func (p *BatchGetSocialInfoRequest) SetOwnerIdList(val []int64) {
	p.OwnerIdList = val
}

var fieldIDToName_BatchGetSocialInfoRequest = map[int16]string{
	1: "viewer_id",
	2: "owner_id_list",
}

func (p *BatchGetSocialInfoRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetSocialInfoRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchGetSocialInfoRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ViewerId = v
	}
	return nil
}

func (p *BatchGetSocialInfoRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.OwnerIdList = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.OwnerIdList = append(p.OwnerIdList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *BatchGetSocialInfoRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("batch_get_social_info_request"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetSocialInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("viewer_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ViewerId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BatchGetSocialInfoRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("owner_id_list", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.OwnerIdList)); err != nil {
		return err
	}
	for _, v := range p.OwnerIdList {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BatchGetSocialInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetSocialInfoRequest(%+v)", *p)
}

func (p *BatchGetSocialInfoRequest) DeepEqual(ano *BatchGetSocialInfoRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ViewerId) {
		return false
	}
	if !p.Field2DeepEqual(ano.OwnerIdList) {
		return false
	}
	return true
}

func (p *BatchGetSocialInfoRequest) Field1DeepEqual(src int64) bool {

	if p.ViewerId != src {
		return false
	}
	return true
}
func (p *BatchGetSocialInfoRequest) Field2DeepEqual(src []int64) bool {

	if len(p.OwnerIdList) != len(src) {
		return false
	}
	for i, v := range p.OwnerIdList {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type BatchGetSocialInfoResponse struct {
	BaseResp       *base.BaseResponse `thrift:"base_resp,1" frugal:"1,default,base.BaseResponse" json:"base_resp"`
	SocialInfoList []*base.SocialInfo `thrift:"social_info_list,2" frugal:"2,default,list<base.SocialInfo>" json:"social_info_list"`
}

func NewBatchGetSocialInfoResponse() *BatchGetSocialInfoResponse {
	return &BatchGetSocialInfoResponse{}
}

func (p *BatchGetSocialInfoResponse) InitDefault() {
	*p = BatchGetSocialInfoResponse{}
}

var BatchGetSocialInfoResponse_BaseResp_DEFAULT *base.BaseResponse

func (p *BatchGetSocialInfoResponse) GetBaseResp() (v *base.BaseResponse) {
	if !p.IsSetBaseResp() {
		return BatchGetSocialInfoResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}

func (p *BatchGetSocialInfoResponse) GetSocialInfoList() (v []*base.SocialInfo) {
	return p.SocialInfoList
}
func (p *BatchGetSocialInfoResponse) SetBaseResp(val *base.BaseResponse) {
	p.BaseResp = val
}
func (p *BatchGetSocialInfoResponse) SetSocialInfoList(val []*base.SocialInfo) {
	p.SocialInfoList = val
}

var fieldIDToName_BatchGetSocialInfoResponse = map[int16]string{
	1: "base_resp",
	2: "social_info_list",
}

func (p *BatchGetSocialInfoResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchGetSocialInfoResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetSocialInfoResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchGetSocialInfoResponse) ReadField1(iprot thrift.TProtocol) error {
	p.BaseResp = base.NewBaseResponse()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BatchGetSocialInfoResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.SocialInfoList = make([]*base.SocialInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewSocialInfo()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.SocialInfoList = append(p.SocialInfoList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *BatchGetSocialInfoResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("batch_get_social_info_response"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetSocialInfoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BatchGetSocialInfoResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("social_info_list", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SocialInfoList)); err != nil {
		return err
	}
	for _, v := range p.SocialInfoList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BatchGetSocialInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetSocialInfoResponse(%+v)", *p)
}

func (p *BatchGetSocialInfoResponse) DeepEqual(ano *BatchGetSocialInfoResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	if !p.Field2DeepEqual(ano.SocialInfoList) {
		return false
	}
	return true
}

func (p *BatchGetSocialInfoResponse) Field1DeepEqual(src *base.BaseResponse) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *BatchGetSocialInfoResponse) Field2DeepEqual(src []*base.SocialInfo) bool {

	if len(p.SocialInfoList) != len(src) {
		return false
	}
	for i, v := range p.SocialInfoList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type SocietyService interface {
	GetSocialInfo(ctx context.Context, req *GetSocialInfoRequest) (r *GetSocialInfoResponse, err error)

	BatchGetSocialInfo(ctx context.Context, req *BatchGetSocialInfoRequest) (r *BatchGetSocialInfoResponse, err error)
}

type SocietyServiceClient struct {
	c thrift.TClient
}

func NewSocietyServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SocietyServiceClient {
	return &SocietyServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewSocietyServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SocietyServiceClient {
	return &SocietyServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewSocietyServiceClient(c thrift.TClient) *SocietyServiceClient {
	return &SocietyServiceClient{
		c: c,
	}
}

func (p *SocietyServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *SocietyServiceClient) GetSocialInfo(ctx context.Context, req *GetSocialInfoRequest) (r *GetSocialInfoResponse, err error) {
	var _args SocietyServiceGetSocialInfoArgs
	_args.Req = req
	var _result SocietyServiceGetSocialInfoResult
	if err = p.Client_().Call(ctx, "GetSocialInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SocietyServiceClient) BatchGetSocialInfo(ctx context.Context, req *BatchGetSocialInfoRequest) (r *BatchGetSocialInfoResponse, err error) {
	var _args SocietyServiceBatchGetSocialInfoArgs
	_args.Req = req
	var _result SocietyServiceBatchGetSocialInfoResult
	if err = p.Client_().Call(ctx, "BatchGetSocialInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type SocietyServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      SocietyService
}

func (p *SocietyServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *SocietyServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *SocietyServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewSocietyServiceProcessor(handler SocietyService) *SocietyServiceProcessor {
	self := &SocietyServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("GetSocialInfo", &societyServiceProcessorGetSocialInfo{handler: handler})
	self.AddToProcessorMap("BatchGetSocialInfo", &societyServiceProcessorBatchGetSocialInfo{handler: handler})
	return self
}
func (p *SocietyServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type societyServiceProcessorGetSocialInfo struct {
	handler SocietyService
}

func (p *societyServiceProcessorGetSocialInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SocietyServiceGetSocialInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetSocialInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SocietyServiceGetSocialInfoResult{}
	var retval *GetSocialInfoResponse
	if retval, err2 = p.handler.GetSocialInfo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetSocialInfo: "+err2.Error())
		oprot.WriteMessageBegin("GetSocialInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetSocialInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type societyServiceProcessorBatchGetSocialInfo struct {
	handler SocietyService
}

func (p *societyServiceProcessorBatchGetSocialInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SocietyServiceBatchGetSocialInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchGetSocialInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SocietyServiceBatchGetSocialInfoResult{}
	var retval *BatchGetSocialInfoResponse
	if retval, err2 = p.handler.BatchGetSocialInfo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchGetSocialInfo: "+err2.Error())
		oprot.WriteMessageBegin("BatchGetSocialInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchGetSocialInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type SocietyServiceGetSocialInfoArgs struct {
	Req *GetSocialInfoRequest `thrift:"req,1" frugal:"1,default,GetSocialInfoRequest" json:"req"`
}

func NewSocietyServiceGetSocialInfoArgs() *SocietyServiceGetSocialInfoArgs {
	return &SocietyServiceGetSocialInfoArgs{}
}

func (p *SocietyServiceGetSocialInfoArgs) InitDefault() {
	*p = SocietyServiceGetSocialInfoArgs{}
}

var SocietyServiceGetSocialInfoArgs_Req_DEFAULT *GetSocialInfoRequest

func (p *SocietyServiceGetSocialInfoArgs) GetReq() (v *GetSocialInfoRequest) {
	if !p.IsSetReq() {
		return SocietyServiceGetSocialInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SocietyServiceGetSocialInfoArgs) SetReq(val *GetSocialInfoRequest) {
	p.Req = val
}

var fieldIDToName_SocietyServiceGetSocialInfoArgs = map[int16]string{
	1: "req",
}

func (p *SocietyServiceGetSocialInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SocietyServiceGetSocialInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocietyServiceGetSocialInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocietyServiceGetSocialInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetSocialInfoRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SocietyServiceGetSocialInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSocialInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocietyServiceGetSocialInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SocietyServiceGetSocialInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocietyServiceGetSocialInfoArgs(%+v)", *p)
}

func (p *SocietyServiceGetSocialInfoArgs) DeepEqual(ano *SocietyServiceGetSocialInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SocietyServiceGetSocialInfoArgs) Field1DeepEqual(src *GetSocialInfoRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type SocietyServiceGetSocialInfoResult struct {
	Success *GetSocialInfoResponse `thrift:"success,0,optional" frugal:"0,optional,GetSocialInfoResponse" json:"success,omitempty"`
}

func NewSocietyServiceGetSocialInfoResult() *SocietyServiceGetSocialInfoResult {
	return &SocietyServiceGetSocialInfoResult{}
}

func (p *SocietyServiceGetSocialInfoResult) InitDefault() {
	*p = SocietyServiceGetSocialInfoResult{}
}

var SocietyServiceGetSocialInfoResult_Success_DEFAULT *GetSocialInfoResponse

func (p *SocietyServiceGetSocialInfoResult) GetSuccess() (v *GetSocialInfoResponse) {
	if !p.IsSetSuccess() {
		return SocietyServiceGetSocialInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SocietyServiceGetSocialInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetSocialInfoResponse)
}

var fieldIDToName_SocietyServiceGetSocialInfoResult = map[int16]string{
	0: "success",
}

func (p *SocietyServiceGetSocialInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocietyServiceGetSocialInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocietyServiceGetSocialInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocietyServiceGetSocialInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetSocialInfoResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SocietyServiceGetSocialInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSocialInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocietyServiceGetSocialInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SocietyServiceGetSocialInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocietyServiceGetSocialInfoResult(%+v)", *p)
}

func (p *SocietyServiceGetSocialInfoResult) DeepEqual(ano *SocietyServiceGetSocialInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SocietyServiceGetSocialInfoResult) Field0DeepEqual(src *GetSocialInfoResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type SocietyServiceBatchGetSocialInfoArgs struct {
	Req *BatchGetSocialInfoRequest `thrift:"req,1" frugal:"1,default,BatchGetSocialInfoRequest" json:"req"`
}

func NewSocietyServiceBatchGetSocialInfoArgs() *SocietyServiceBatchGetSocialInfoArgs {
	return &SocietyServiceBatchGetSocialInfoArgs{}
}

func (p *SocietyServiceBatchGetSocialInfoArgs) InitDefault() {
	*p = SocietyServiceBatchGetSocialInfoArgs{}
}

var SocietyServiceBatchGetSocialInfoArgs_Req_DEFAULT *BatchGetSocialInfoRequest

func (p *SocietyServiceBatchGetSocialInfoArgs) GetReq() (v *BatchGetSocialInfoRequest) {
	if !p.IsSetReq() {
		return SocietyServiceBatchGetSocialInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SocietyServiceBatchGetSocialInfoArgs) SetReq(val *BatchGetSocialInfoRequest) {
	p.Req = val
}

var fieldIDToName_SocietyServiceBatchGetSocialInfoArgs = map[int16]string{
	1: "req",
}

func (p *SocietyServiceBatchGetSocialInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SocietyServiceBatchGetSocialInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocietyServiceBatchGetSocialInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocietyServiceBatchGetSocialInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewBatchGetSocialInfoRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SocietyServiceBatchGetSocialInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetSocialInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocietyServiceBatchGetSocialInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SocietyServiceBatchGetSocialInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocietyServiceBatchGetSocialInfoArgs(%+v)", *p)
}

func (p *SocietyServiceBatchGetSocialInfoArgs) DeepEqual(ano *SocietyServiceBatchGetSocialInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SocietyServiceBatchGetSocialInfoArgs) Field1DeepEqual(src *BatchGetSocialInfoRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type SocietyServiceBatchGetSocialInfoResult struct {
	Success *BatchGetSocialInfoResponse `thrift:"success,0,optional" frugal:"0,optional,BatchGetSocialInfoResponse" json:"success,omitempty"`
}

func NewSocietyServiceBatchGetSocialInfoResult() *SocietyServiceBatchGetSocialInfoResult {
	return &SocietyServiceBatchGetSocialInfoResult{}
}

func (p *SocietyServiceBatchGetSocialInfoResult) InitDefault() {
	*p = SocietyServiceBatchGetSocialInfoResult{}
}

var SocietyServiceBatchGetSocialInfoResult_Success_DEFAULT *BatchGetSocialInfoResponse

func (p *SocietyServiceBatchGetSocialInfoResult) GetSuccess() (v *BatchGetSocialInfoResponse) {
	if !p.IsSetSuccess() {
		return SocietyServiceBatchGetSocialInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SocietyServiceBatchGetSocialInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchGetSocialInfoResponse)
}

var fieldIDToName_SocietyServiceBatchGetSocialInfoResult = map[int16]string{
	0: "success",
}

func (p *SocietyServiceBatchGetSocialInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocietyServiceBatchGetSocialInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SocietyServiceBatchGetSocialInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SocietyServiceBatchGetSocialInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewBatchGetSocialInfoResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SocietyServiceBatchGetSocialInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetSocialInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SocietyServiceBatchGetSocialInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SocietyServiceBatchGetSocialInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocietyServiceBatchGetSocialInfoResult(%+v)", *p)
}

func (p *SocietyServiceBatchGetSocialInfoResult) DeepEqual(ano *SocietyServiceBatchGetSocialInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SocietyServiceBatchGetSocialInfoResult) Field0DeepEqual(src *BatchGetSocialInfoResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
