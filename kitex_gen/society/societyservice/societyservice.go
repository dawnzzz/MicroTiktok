// Code generated by Kitex v0.5.2. DO NOT EDIT.

package societyservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	society "github.com/dawnzzz/MicroTiktok/kitex_gen/society"
)

func serviceInfo() *kitex.ServiceInfo {
	return societyServiceServiceInfo
}

var societyServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "SocietyService"
	handlerType := (*society.SocietyService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetSocialInfo":      kitex.NewMethodInfo(getSocialInfoHandler, newSocietyServiceGetSocialInfoArgs, newSocietyServiceGetSocialInfoResult, false),
		"BatchGetSocialInfo": kitex.NewMethodInfo(batchGetSocialInfoHandler, newSocietyServiceBatchGetSocialInfoArgs, newSocietyServiceBatchGetSocialInfoResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "society",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func getSocialInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*society.SocietyServiceGetSocialInfoArgs)
	realResult := result.(*society.SocietyServiceGetSocialInfoResult)
	success, err := handler.(society.SocietyService).GetSocialInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocietyServiceGetSocialInfoArgs() interface{} {
	return society.NewSocietyServiceGetSocialInfoArgs()
}

func newSocietyServiceGetSocialInfoResult() interface{} {
	return society.NewSocietyServiceGetSocialInfoResult()
}

func batchGetSocialInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*society.SocietyServiceBatchGetSocialInfoArgs)
	realResult := result.(*society.SocietyServiceBatchGetSocialInfoResult)
	success, err := handler.(society.SocietyService).BatchGetSocialInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocietyServiceBatchGetSocialInfoArgs() interface{} {
	return society.NewSocietyServiceBatchGetSocialInfoArgs()
}

func newSocietyServiceBatchGetSocialInfoResult() interface{} {
	return society.NewSocietyServiceBatchGetSocialInfoResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetSocialInfo(ctx context.Context, req *society.GetSocialInfoRequest) (r *society.GetSocialInfoResponse, err error) {
	var _args society.SocietyServiceGetSocialInfoArgs
	_args.Req = req
	var _result society.SocietyServiceGetSocialInfoResult
	if err = p.c.Call(ctx, "GetSocialInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchGetSocialInfo(ctx context.Context, req *society.BatchGetSocialInfoRequest) (r *society.BatchGetSocialInfoResponse, err error) {
	var _args society.SocietyServiceBatchGetSocialInfoArgs
	_args.Req = req
	var _result society.SocietyServiceBatchGetSocialInfoResult
	if err = p.c.Call(ctx, "BatchGetSocialInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
