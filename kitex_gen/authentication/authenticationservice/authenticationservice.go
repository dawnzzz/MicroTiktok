// Code generated by Kitex v0.5.2. DO NOT EDIT.

package authenticationservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	authentication "github.com/dawnzzz/MicroTiktok/kitex_gen/authentication"
)

func serviceInfo() *kitex.ServiceInfo {
	return authenticationServiceServiceInfo
}

var authenticationServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "AuthenticationService"
	handlerType := (*authentication.AuthenticationService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GenerateToken": kitex.NewMethodInfo(generateTokenHandler, newAuthenticationServiceGenerateTokenArgs, newAuthenticationServiceGenerateTokenResult, false),
		"CheckToken":    kitex.NewMethodInfo(checkTokenHandler, newAuthenticationServiceCheckTokenArgs, newAuthenticationServiceCheckTokenResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "authentication",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func generateTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*authentication.AuthenticationServiceGenerateTokenArgs)
	realResult := result.(*authentication.AuthenticationServiceGenerateTokenResult)
	success, err := handler.(authentication.AuthenticationService).GenerateToken(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAuthenticationServiceGenerateTokenArgs() interface{} {
	return authentication.NewAuthenticationServiceGenerateTokenArgs()
}

func newAuthenticationServiceGenerateTokenResult() interface{} {
	return authentication.NewAuthenticationServiceGenerateTokenResult()
}

func checkTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*authentication.AuthenticationServiceCheckTokenArgs)
	realResult := result.(*authentication.AuthenticationServiceCheckTokenResult)
	success, err := handler.(authentication.AuthenticationService).CheckToken(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAuthenticationServiceCheckTokenArgs() interface{} {
	return authentication.NewAuthenticationServiceCheckTokenArgs()
}

func newAuthenticationServiceCheckTokenResult() interface{} {
	return authentication.NewAuthenticationServiceCheckTokenResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GenerateToken(ctx context.Context, req *authentication.GenerateTokenRequest) (r *authentication.GenerateTokenResponse, err error) {
	var _args authentication.AuthenticationServiceGenerateTokenArgs
	_args.Req = req
	var _result authentication.AuthenticationServiceGenerateTokenResult
	if err = p.c.Call(ctx, "GenerateToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckToken(ctx context.Context, req *authentication.CheckTokenRequest) (r *authentication.CheckTokenResponse, err error) {
	var _args authentication.AuthenticationServiceCheckTokenArgs
	_args.Req = req
	var _result authentication.AuthenticationServiceCheckTokenResult
	if err = p.c.Call(ctx, "CheckToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
